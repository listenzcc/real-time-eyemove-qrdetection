# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from sdk_wrapper import *
from configparser import ConfigParser

from PIL import Image
import numpy as np

from util.detect_with_qr import QrDetector

qd = QrDetector()
qd.start_service()


def qpixmap_to_pil(pixmap):
    # Convert QPixmap to QImage
    qimage = pixmap.toImage()

    # Convert to ARGB32 format (if needed)
    qimage = qimage.convertToFormat(QImage.Format_ARGB32)

    # Get image dimensions
    width = qimage.width()
    height = qimage.height()

    # Get the image data as bytes
    ptr = qimage.bits()
    ptr.setsize(qimage.byteCount())
    arr = np.array(ptr).reshape(height, width, 4)  # Requires numpy

    # Create PIL Image (note the mode is 'RGBA')
    pil_image = Image.fromarray(arr, 'RGBA')
    return pil_image


class SceneImageLabel(QtWidgets.QLabel):
    button_clicked_signal = QtCore.pyqtSignal(int, int)

    def __init__(self, parent=None):
        super(SceneImageLabel, self).__init__(parent)
        self.isDoubleClick = False

    def mousePressEvent(self, ev: QtGui.QMouseEvent) -> None:
        print('x:%d y:%d' % (ev.x(), ev.y()))
        if ev.buttons() == QtCore.Qt.LeftButton:
            self.button_clicked_signal.emit(ev.x(), ev.y())

    def connect_customized_slot(self, slot_func):
        self.button_clicked_signal.connect(slot_func)


class Ui_MainWindow(object):
    sdk_object = None
    sdk_is_running = False
    calibration_is_running = False
    current_points = 0
    # Calibration point completion status (0 - ok, less than zero - error)
    finish_points = [[1, 1], [1, 1], [1, 1]]
    cur_gaze_x = 0
    cur_gaze_y = 0
    cur_scene_w = 1280
    cur_scene_h = 720
    sdk_config_path = b'../../bin/config'

    #  Define the signal
    set_sdk_running_signal = QtCore.pyqtSignal(bool)
    set_pupil_center_signal = QtCore.pyqtSignal(float, float, float, float)
    set_gaze_signal = QtCore.pyqtSignal(float, float)
    set_scene_image_signal = QtCore.pyqtSignal(QPixmap)
    set_left_eye_image_signal = QtCore.pyqtSignal(QPixmap)
    set_right_eye_image_signal = QtCore.pyqtSignal(QPixmap)
    set_calibration_finish_signal = QtCore.pyqtSignal(int, int, int)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1450, 734)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(3, -1, 120, 41))
        self.groupBox.setObjectName("groupBox")
        self.comboBoxEnvironment = QtWidgets.QComboBox(self.groupBox)
        self.comboBoxEnvironment.setGeometry(QtCore.QRect(10, 13, 100, 22))
        self.comboBoxEnvironment.setObjectName("comboBoxEnvironment")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(3, 40, 121, 41))
        self.groupBox_2.setObjectName("groupBox_2")
        self.comboBoxResolution = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBoxResolution.setGeometry(QtCore.QRect(10, 12, 100, 22))
        self.comboBoxResolution.setObjectName("comboBoxResolution")
        self.pushButtonStart = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonStart.setGeometry(QtCore.QRect(12, 90, 100, 24))
        self.pushButtonStart.setObjectName("pushButtonStart")
        self.pushButtonStop = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonStop.setGeometry(QtCore.QRect(12, 122, 100, 24))
        self.pushButtonStop.setObjectName("pushButtonStop")
        self.comboBoxPoints = QtWidgets.QComboBox(self.centralwidget)
        self.comboBoxPoints.setGeometry(QtCore.QRect(58, 160, 51, 22))
        self.comboBoxPoints.setObjectName("comboBoxPoints")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(14, 164, 54, 12))
        self.label.setObjectName("label")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 250, 111, 71))
        self.groupBox_3.setObjectName("groupBox_3")
        self.label_2 = QtWidgets.QLabel(self.groupBox_3)
        self.label_2.setGeometry(QtCore.QRect(10, 17, 16, 16))
        self.label_2.setObjectName("label_2")
        self.labelLeftPupilCenterX = QtWidgets.QLabel(self.groupBox_3)
        self.labelLeftPupilCenterX.setGeometry(QtCore.QRect(28, 15, 71, 21))
        self.labelLeftPupilCenterX.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelLeftPupilCenterX.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelLeftPupilCenterX.setLineWidth(1)
        self.labelLeftPupilCenterX.setText("")
        self.labelLeftPupilCenterX.setWordWrap(False)
        self.labelLeftPupilCenterX.setObjectName("labelLeftPupilCenterX")
        self.label_4 = QtWidgets.QLabel(self.groupBox_3)
        self.label_4.setGeometry(QtCore.QRect(10, 42, 16, 16))
        self.label_4.setObjectName("label_4")
        self.labelLeftPupilCenterY = QtWidgets.QLabel(self.groupBox_3)
        self.labelLeftPupilCenterY.setGeometry(QtCore.QRect(28, 40, 71, 21))
        self.labelLeftPupilCenterY.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelLeftPupilCenterY.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelLeftPupilCenterY.setText("")
        self.labelLeftPupilCenterY.setObjectName("labelLeftPupilCenterY")
        self.pushButtonStartCalibration = QtWidgets.QPushButton(
            self.centralwidget)
        self.pushButtonStartCalibration.setGeometry(
            QtCore.QRect(10, 190, 121, 23))
        self.pushButtonStartCalibration.setObjectName(
            "pushButtonStartCalibration")
        self.pushButtonCancelCalibration = QtWidgets.QPushButton(
            self.centralwidget)
        self.pushButtonCancelCalibration.setGeometry(
            QtCore.QRect(10, 220, 121, 23))
        self.pushButtonCancelCalibration.setObjectName(
            "pushButtonCancelCalibration")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(10, 323, 111, 71))
        self.groupBox_4.setObjectName("groupBox_4")
        self.label_6 = QtWidgets.QLabel(self.groupBox_4)
        self.label_6.setGeometry(QtCore.QRect(10, 17, 16, 16))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.groupBox_4)
        self.label_7.setGeometry(QtCore.QRect(10, 42, 16, 16))
        self.label_7.setObjectName("label_7")
        self.labelRightPupilCenterX = QtWidgets.QLabel(self.groupBox_4)
        self.labelRightPupilCenterX.setGeometry(QtCore.QRect(28, 15, 71, 21))
        self.labelRightPupilCenterX.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelRightPupilCenterX.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelRightPupilCenterX.setText("")
        self.labelRightPupilCenterX.setObjectName("labelRightPupilCenterX")
        self.labelRightPupilCenterY = QtWidgets.QLabel(self.groupBox_4)
        self.labelRightPupilCenterY.setGeometry(QtCore.QRect(28, 40, 71, 21))
        self.labelRightPupilCenterY.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelRightPupilCenterY.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelRightPupilCenterY.setText("")
        self.labelRightPupilCenterY.setObjectName("labelRightPupilCenterY")
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setGeometry(QtCore.QRect(10, 396, 111, 71))
        self.groupBox_5.setObjectName("groupBox_5")
        self.label_3 = QtWidgets.QLabel(self.groupBox_5)
        self.label_3.setGeometry(QtCore.QRect(10, 16, 16, 16))
        self.label_3.setObjectName("label_3")
        self.label_5 = QtWidgets.QLabel(self.groupBox_5)
        self.label_5.setGeometry(QtCore.QRect(10, 40, 16, 16))
        self.label_5.setObjectName("label_5")
        self.labelGazeX = QtWidgets.QLabel(self.groupBox_5)
        self.labelGazeX.setGeometry(QtCore.QRect(28, 14, 71, 21))
        self.labelGazeX.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelGazeX.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelGazeX.setText("")
        self.labelGazeX.setObjectName("labelGazeX")
        self.labelGazeY = QtWidgets.QLabel(self.groupBox_5)
        self.labelGazeY.setGeometry(QtCore.QRect(28, 39, 71, 21))
        self.labelGazeY.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelGazeY.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelGazeY.setText("")
        self.labelGazeY.setObjectName("labelGazeY")
        # QtWidgets.QLabel(self.centralwidget)
        self.labelSceneImage = SceneImageLabel(self.centralwidget)
        self.labelSceneImage.connect_customized_slot(
            self.on_scene_image_area_clicked)  # Connection slot function
        self.labelSceneImage.setGeometry(QtCore.QRect(169, 10, 1280, 720))
        self.labelSceneImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelSceneImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelSceneImage.setObjectName("labelSceneImage")
        self.labelLeftEyeImage = QtWidgets.QLabel(self.centralwidget)
        self.labelLeftEyeImage.setGeometry(QtCore.QRect(2, 488, 160, 120))
        self.labelLeftEyeImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelLeftEyeImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelLeftEyeImage.setObjectName("labelLeftEyeImage")
        self.labelRightEyeImage = QtWidgets.QLabel(self.centralwidget)
        self.labelRightEyeImage.setGeometry(QtCore.QRect(2, 607, 160, 120))
        self.labelRightEyeImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelRightEyeImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelRightEyeImage.setObjectName("labelRightEyeImage")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "Environment"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Resolution"))
        self.pushButtonStart.setText(_translate("MainWindow", "Start"))
        self.pushButtonStop.setText(_translate("MainWindow", "Stop"))
        self.label.setText(_translate("MainWindow", "Points"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Left Pupil"))
        self.label_2.setText(_translate("MainWindow", "X"))
        self.label_4.setText(_translate("MainWindow", "Y"))
        self.pushButtonStartCalibration.setText(
            _translate("MainWindow", "Start Calibration"))
        self.pushButtonCancelCalibration.setText(
            _translate("MainWindow", "stop Calibration"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Right Pupil"))
        self.label_6.setText(_translate("MainWindow", "X"))
        self.label_7.setText(_translate("MainWindow", "Y"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Recommend Gaze"))
        self.label_3.setText(_translate("MainWindow", "X"))
        self.label_5.setText(_translate("MainWindow", "Y"))
        self.labelSceneImage.setText(
            _translate("MainWindow", "scene image area"))
        self.labelLeftEyeImage.setText(
            _translate("MainWindow", "left eye image"))
        self.labelRightEyeImage.setText(
            _translate("MainWindow", "right eye image"))

    def set_ui_attributes(self):
        self.setWindowFlags(QtCore.Qt.WindowCloseButtonHint)
        self.setFixedSize(self.width(), self.height())
        self.setWindowTitle("demo of aSeeGlasses")

        self.comboBoxEnvironment.addItem("indoor", 301)
        self.comboBoxEnvironment.addItem("outdoor", 302)
        self.comboBoxEnvironment.addItem("darkness", 303)
        self.comboBoxEnvironment.setCurrentIndex(0)

        self.comboBoxResolution.addItem("1280 * 960", 201)
        self.comboBoxResolution.addItem("1280 * 720", 202)
        self.comboBoxResolution.addItem(" 800 * 600", 203)
        self.comboBoxResolution.addItem("1920 * 1080", 204)
        self.comboBoxResolution.setCurrentIndex(1)

        self.comboBoxPoints.addItem("1", 1)
        self.comboBoxPoints.addItem("3", 3)
        self.comboBoxPoints.setCurrentIndex(1)

        self.pushButtonStop.setEnabled(False)
        # self.comboBoxPoints.setEnabled(False)
        self.pushButtonStartCalibration.setEnabled(False)
        # self.pushButtonCancelCalibration.setEnabled(False)

        # Connect the signal to the slot
        self.pushButtonStart.clicked.connect(self.on_start_btn_clicked)
        self.pushButtonStop.clicked.connect(self.on_stop_btn_clicked)
        self.pushButtonStartCalibration.clicked.connect(
            self.on_start_calibration_btn_clicked)
        self.pushButtonCancelCalibration.clicked.connect(
            self.on_stop_calibration_btn_clicked)

        self.set_sdk_running_signal.connect(self.on_set_sdk_running)
        self.set_pupil_center_signal.connect(self.display_pupil_data)
        self.set_gaze_signal.connect(self.display_gaze_data)
        self.set_scene_image_signal.connect(self.display_scene_image)
        self.set_left_eye_image_signal.connect(self.display_left_eye_image)
        self.set_right_eye_image_signal.connect(self.display_right_eye_image)
        self.set_calibration_finish_signal.connect(
            self.on_set_calibration_finish)

        self.sdk_object = wrapper()  # Create an SDK object instance
        self.sdk_object.load_library(
            self.sdk_config_path)  # Load the SDK libraries
        # Pass the current window object to the SDK object
        self.sdk_object.set_ui_handle(self)

    def on_start_btn_clicked(self):
        # score_buf = py_7i_score_buffer()
        # print(score_buf.data.decode('utf-8'))
        # return
        pwd = self.read_conifg_ini(self.sdk_config_path)
        print(pwd)
        ret = self.sdk_object.connect_softdog(pwd)
        if 0 != ret:
            QMessageBox.warning(
                self, "warning", "Please check that 'pwd' is correct in config.ini file!")
            return

        environment = self.comboBoxEnvironment.currentData()
        resolution = self.comboBoxResolution.currentData()
        if PY_7I_RESOLUTION.P1280_960.value == resolution:
            self.cur_scene_w = 1280
            self.cur_scene_h = 960
        elif PY_7I_RESOLUTION.P1280_720.value == resolution:
            self.cur_scene_w = 1280
            self.cur_scene_h = 720
        elif PY_7I_RESOLUTION.P800_600.value == resolution:
            self.cur_scene_w = 800
            self.cur_scene_h = 600
        elif PY_7I_RESOLUTION.P1920_1080.value == resolution:
            self.cur_scene_w = 1920
            self.cur_scene_h = 1080

        ret = self.sdk_object.start(
            environment, resolution, self.cur_scene_w, self.cur_scene_h)
        if 0 == ret:
            self.sdk_is_running = True
            self.pushButtonStop.setEnabled(True)
            self.pushButtonStart.setEnabled(False)
            self.pushButtonStartCalibration.setEnabled(True)
        else:
            self.sdk_is_running = False
            self.pushButtonStartCalibration.setEnabled(False)

    def on_stop_btn_clicked(self):
        self.sdk_object.stop()
        self.pushButtonStop.setEnabled(False)
        self.pushButtonStart.setEnabled(True)
        self.pushButtonStartCalibration.setEnabled(False)
        self.labelSceneImage.setPixmap(QPixmap())
        self.labelLeftEyeImage.setPixmap(QPixmap())
        self.labelRightEyeImage.setPixmap(QPixmap())
        self.sdk_is_running = False

    def on_start_calibration_btn_clicked(self):
        self.current_points = self.comboBoxPoints.currentData()
        self.sdk_object.start_calibration(self.current_points)
        self.init_finish_points()
        self.pushButtonStartCalibration.setEnabled(False)

    def on_stop_calibration_btn_clicked(self):
        self.sdk_object.stop_calibration()
        self.pushButtonStartCalibration.setEnabled(True)

    def on_scene_image_area_clicked(self, x, y):
        # 图像中心点定义为: 坐标系原点(0,0)，沿中心点向上为Y轴正方向，沿中心点向右为X轴正方向！
        point_x = float(x) - float(self.cur_scene_w / 2)
        point_y = float(y) - float(self.cur_scene_h / 2)
        print("point:%f %f" % (point_x, point_y))
        self.sdk_object.set_current_point(point_x, point_y)

    def display_scene_image(self, image):
        # ! Update scene image.
        pil_image = qpixmap_to_pil(image)

        # TODO: The example
        # pil_image
        # self.cur_gaze_x, in pixels
        # self.cur_gaze_y, in pixels
        x = self.cur_gaze_x / pil_image.size[0]
        y = self.cur_gaze_y / pil_image.size[1]
        qd.update(pil_image, x, y)

        painter = QPainter(image)
        painter.setRenderHints(
            QPainter.Antialiasing | QPainter.SmoothPixmapTransform | QPainter.Qt4CompatiblePainting)
        color = QColor()
        color.setGreen(255)
        painter.setBrush(QBrush(color))
        diameter = 30
        rect = QRectF(self.cur_gaze_x - diameter / 2,
                      self.cur_gaze_y - diameter / 2, diameter, diameter)
        painter.drawEllipse(rect)
        self.labelSceneImage.setPixmap(image)

    def display_left_eye_image(self, image):
        self.labelLeftEyeImage.setPixmap(image)

    def display_right_eye_image(self, image):
        self.labelRightEyeImage.setPixmap(image)

    def display_pupil_data(self, left_x, left_y, right_x, right_y):
        self.labelLeftPupilCenterX.setText(str(left_x))
        self.labelLeftPupilCenterY.setText(str(left_y))
        self.labelRightPupilCenterX.setText(str(right_x))
        self.labelRightPupilCenterY.setText(str(right_y))

    def display_gaze_data(self, x, y):
        self.labelGazeX.setText(str(x))
        self.labelGazeY.setText(str(y))
        # 图像中心点定义为坐标系原点（0,0）转换为：图像左上角为坐标系（0,0），便于GDI绘图！
        self.cur_gaze_x = (x + self.cur_scene_w / 2)
        self.cur_gaze_y = (y + self.cur_scene_h / 2)

    def on_set_sdk_running(self, enabled):
        self.sdk_is_running = enabled
        self.pushButtonStart.setEnabled(not enabled)
        self.pushButtonStop.setEnabled(enabled)
        self.pushButtonStartCalibration.setEnabled(enabled)
        if not enabled:
            self.labelSceneImage.setPixmap(QPixmap())
            self.labelLeftEyeImage.setPixmap(QPixmap())
            self.labelRightEyeImage.setPixmap(QPixmap())

    def on_set_calibration_finish(self, eye, index, error):
        self.finish_points[index - 1][eye] = error
        if 1 == self.current_points:
            # Both left and right eyes return
            if 1 != self.finish_points[0][0] and 1 != self.finish_points[0][1]:
                self.on_stop_calibration_btn_clicked()
        elif 3 == self.current_points:
            if \
                1 != self.finish_points[0][0] and 1 != self.finish_points[0][1] and \
                    1 != self.finish_points[1][0] and 1 != self.finish_points[1][1] and \
                    1 != self.finish_points[2][0] and 1 != self.finish_points[2][1]:
                self.on_stop_calibration_btn_clicked()

    def init_finish_points(self):
        self.finish_points[0][0] = 1
        self.finish_points[0][1] = 1
        self.finish_points[1][0] = 1
        self.finish_points[1][1] = 1
        self.finish_points[2][0] = 1
        self.finish_points[2][1] = 1

    def closeEvent(self, event):
        reply = QtWidgets.QMessageBox.question(self,
                                               'warning',
                                               "Are you sure exit?",
                                               QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                                               QtWidgets.QMessageBox.No)
        if reply == QtWidgets.QMessageBox.Yes:
            if self.sdk_is_running:
                self.sdk_object.stop()  # If the current SDK is running, stop first
                # Wait for the stop command to execute successfully
                time.sleep(3)
            event.accept()
            self.close()
        else:
            event.ignore()

    def read_conifg_ini(self, path) -> str:
        config_path = path + b'/config.ini'

        cf = ConfigParser()
        cf.read(config_path)
        pwd = cf.get('softdog', 'pwd')
        pwd = pwd.encode(encoding='utf-8')
        return pwd
